#include<stdio.h>
#include<stdlib.h>
#include<math.h>

struct Node{
	int coeff;
	int expo;
	struct Node* link;
};

struct Node* insert( struct Node*head, int co, int ex){
	struct Node*temp;
	struct Node*newP = (struct Node*)malloc(sizeof(struct Node));
	newP -> coeff = co;
	newP -> expo = ex;
	newP -> link = NULL;
	
	if (head == NULL || ex > head -> expo){
		newP -> link  = head;
		head = newP;
	}
	else{
		temp = head;
		while(temp -> link != NULL && temp->link->expo >= ex)
			temp = temp -> link;
			newP ->link = temp ->link;
			temp ->link = newP;
	}
	return head;
}

struct Node*create(struct Node*head){
	int expo;
	int coeff;
	int i;
	scanf("%d", &i);
	for (int j = i; j>-1;j--){
		expo = j;
		scanf("%d",&coeff);
		head = insert(head, coeff, expo);
	}
	return head;
}

void print(struct Node*head){
	if (head == NULL)
		printf("NO POLYNOMIAL");
	else if (head-> coeff == 0){
		head = head->link;
	}
	else{
		struct Node*temp = head;
		while(temp != NULL){
			if (temp -> coeff == 0){
			temp = temp->link;
			}
			else if (temp -> expo == 0){
				printf("(%d)\n", temp -> coeff); 
				temp = temp -> link;
			}
			else{
				printf("(%dx^%d)", temp ->coeff, temp ->expo);
				temp = temp -> link;
				if(temp != NULL)
					printf("+");
				else
					printf("\n");
			}
		}
	}	
}

int Evaluate(struct Node*head){
	struct Node*temp = head;
	int coeff = temp -> coeff;
	int expo = temp -> expo;
	int result = 0, x;
	printf("\n(evaluate the polynomial on the number)x = ");  //fwhwudgundd
	scanf("%d", &x);
	while(temp!= NULL){
		result = result + temp->coeff * pow(x, temp->expo); // fnwufbw
		temp = temp->link;
	}
	return result;
}

void polyAdd(struct Node*head1, struct Node*head2){
	struct Node* ptr1 = head1;
	struct Node* ptr2 = head2;
	struct Node* head3 = NULL;
	while(ptr1 -> coeff !=0 && ptr2 -> coeff !=0){
		while(ptr1 != NULL && ptr2 != NULL){
			if(ptr1 -> coeff == 0){
				ptr1 = ptr1 ->link;
		}
			else if(ptr2 -> coeff == 0){
				ptr2 = ptr2 -> link;
			}
			else if(ptr1->expo >= ptr2->expo){
				head3 = insert(head3,  ptr1->coeff, ptr1->expo + ptr2->expo + 1);
				ptr1 = ptr1 -> link;
			}
			else if(ptr1->expo == ptr2->expo){
				head3 = insert(head3, ptr1->coeff, ptr1->expo + ptr2->expo + 1);
				ptr1 = ptr1 -> link;
				ptr2 = ptr2 -> link;
			}
			else if(ptr1->expo < ptr2->expo){
				head3 = insert(head3, ptr1->coeff, ptr1->expo + ptr2->expo + 1);
				ptr2 = ptr2 -> link;
			}
			else if (ptr1 -> expo == 0){
				head3 = insert(head3, ptr1->coeff, ptr1->expo + ptr2 ->expo + 1);
				ptr1 = ptr1 ->link;
			}
		}
		while(ptr1 != NULL){
			head3 = insert(head3, ptr1 -> coeff, ptr1 -> expo);
			ptr1 = ptr1 -> link;
		}
		while(ptr2 != NULL){
			head3 = insert(head3, ptr2 -> coeff, ptr2 -> expo);
			ptr2 = ptr2 -> link;
		}
		
		printf("P1(x)=");
		print(head1);
		printf("P2(x)=");
		print(head2);
		printf("P3(x)=");
		print(head3);
		printf("P1(2)= %d", Evaluate(head1));
		printf("\nP2(2)= %d", Evaluate(head2));
		printf("\nP3(2)= %d", Evaluate(head3));
	}
}

int main(){
	
    struct Node*head1 = NULL;
    struct Node*head2 = NULL;
	int expo;
	int coeff;

	
	head1 = create(head1);
    
	head2 = create(head2);
	int x;
	scanf("%d", &x);
	polyAdd(head1, head2);
	
	return 0;
}